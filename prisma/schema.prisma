generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Product {
  id           String   @id @default(uuid())
  title        String
  price        Int
  description  String?
  image        String?
  brand        String?
  stock        Int?
  currencyCode String?
  isHidden     Boolean?
  countSold    Int      @default(0)
  material     String?
  rating       Float?
  salePrice    Int?
  weight       String?
  country      String?
  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cartLine CartLine ?

  // Relationships
  options          Option[]
  variants         Variant[]
  reviews          Review[]
  additionalImages AdditionalImage[]
  tags             String[]
}

// schema.prisma

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lines     CartLine[]
}

model CartLine {
  id             String           @id @default(uuid())
  quantity       Int
  productId      String // Assuming product ID is stored here
  product Product  @relation(fields: [productId],references: [id])
  cart           Cart             @relation(fields: [cartId], references: [id])
  cartId         String
  ProductVariant ProductVariant[]
  @@unique([productId])
}

model ProductVariant {
  id            String   @id @default(uuid())
  name          String
  value         String
  cartLineId    String
  cartLine      CartLine @relation(fields: [cartLineId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Option {
  id        String   @id @default(uuid())
  name      String
  values    String[]
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id               String           @id @default(uuid())
  availableForSale Boolean
  productId        String
  product          Product          @relation(fields: [productId], references: [id])
  selectedOptions  SelectedOption[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  cartLineId       String?
}

model SelectedOption {
  id        String   @id @default(uuid())
  name      String
  value     String
  variantId String
  variant   Variant  @relation(fields: [variantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  userId    String   @id
  comment   String
  rating    Float
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdditionalImage {
  id        Int      @id @default(autoincrement())
  altText   String
  src       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
